/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace BattleShipGame {
  export type CoordinateStruct = { x: BigNumberish; y: BigNumberish };

  export type CoordinateStructOutput = [x: bigint, y: bigint] & {
    x: bigint;
    y: bigint;
  };

  export type ShipShotProofStruct = {
    signature: BytesLike;
    shotBy: AddressLike;
  };

  export type ShipShotProofStructOutput = [
    signature: string,
    shotBy: string
  ] & { signature: string; shotBy: string };
}

export interface BattleShipGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NO_PLAYERS"
      | "NO_SHIP_PIECES"
      | "destroyedPlayers"
      | "endTurn"
      | "getWinner"
      | "hasReportedShots"
      | "isCheater"
      | "isGameOver"
      | "isGameStarted"
      | "isKeysRevealed"
      | "isTurnOver"
      | "joinGame"
      | "numberOfDestroyedPlayers"
      | "numberOfKeysSubmitted"
      | "owner"
      | "playerHasPlacedShips"
      | "playerHasPlayed"
      | "playerHasReportedHits"
      | "playerHashedSecretKeys"
      | "playerReportHistory"
      | "playerSecretKeys"
      | "playerShots"
      | "reportHits"
      | "round"
      | "roundShotsHistory"
      | "sign"
      | "submitKey"
      | "takeAShot"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PlayerJoinedGame" | "PlayerLost" | "ShotReport"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "NO_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NO_SHIP_PIECES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destroyedPlayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "endTurn", values?: undefined): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasReportedShots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCheater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameOver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isGameStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isKeysRevealed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTurnOver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfDestroyedPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfKeysSubmitted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerHasPlacedShips",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerHasPlayed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerHasReportedHits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerHashedSecretKeys",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerReportHistory",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerSecretKeys",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerShots",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reportHits",
    values: [BattleShipGame.ShipShotProofStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "round", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roundShotsHistory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sign",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "takeAShot",
    values: [BattleShipGame.CoordinateStruct]
  ): string;

  decodeFunctionResult(functionFragment: "NO_PLAYERS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NO_SHIP_PIECES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyedPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasReportedShots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCheater", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGameOver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGameStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKeysRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTurnOver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfDestroyedPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfKeysSubmitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerHasPlacedShips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerHasPlayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerHasReportedHits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerHashedSecretKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerReportHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerSecretKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerShots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reportHits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "round", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roundShotsHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sign", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeAShot", data: BytesLike): Result;
}

export namespace PlayerJoinedGameEvent {
  export type InputTuple = [player: AddressLike, playerIndex: BigNumberish];
  export type OutputTuple = [player: string, playerIndex: bigint];
  export interface OutputObject {
    player: string;
    playerIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerLostEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShotReportEvent {
  export type InputTuple = [
    coord: BattleShipGame.CoordinateStruct,
    target: AddressLike,
    shotBy: AddressLike,
    isHit: boolean
  ];
  export type OutputTuple = [
    coord: BattleShipGame.CoordinateStructOutput,
    target: string,
    shotBy: string,
    isHit: boolean
  ];
  export interface OutputObject {
    coord: BattleShipGame.CoordinateStructOutput;
    target: string;
    shotBy: string;
    isHit: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BattleShipGame extends BaseContract {
  connect(runner?: ContractRunner | null): BattleShipGame;
  waitForDeployment(): Promise<this>;

  interface: BattleShipGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NO_PLAYERS: TypedContractMethod<[], [bigint], "view">;

  NO_SHIP_PIECES: TypedContractMethod<[], [bigint], "view">;

  destroyedPlayers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  endTurn: TypedContractMethod<[], [boolean], "nonpayable">;

  getWinner: TypedContractMethod<[], [string], "view">;

  hasReportedShots: TypedContractMethod<[], [boolean], "view">;

  isCheater: TypedContractMethod<[_player: AddressLike], [boolean], "view">;

  isGameOver: TypedContractMethod<[], [boolean], "view">;

  isGameStarted: TypedContractMethod<[], [boolean], "view">;

  isKeysRevealed: TypedContractMethod<[], [boolean], "view">;

  isTurnOver: TypedContractMethod<[], [boolean], "view">;

  joinGame: TypedContractMethod<
    [_playerShips: BytesLike[], hashedSecretKey: BytesLike],
    [void],
    "nonpayable"
  >;

  numberOfDestroyedPlayers: TypedContractMethod<[], [bigint], "view">;

  numberOfKeysSubmitted: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  playerHasPlacedShips: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  playerHasPlayed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  playerHasReportedHits: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  playerHashedSecretKeys: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  playerReportHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [[string, string] & { signature: string; shotBy: string }],
    "view"
  >;

  playerSecretKeys: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  playerShots: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  reportHits: TypedContractMethod<
    [_shotSignatures: BattleShipGame.ShipShotProofStruct[]],
    [void],
    "nonpayable"
  >;

  round: TypedContractMethod<[], [bigint], "view">;

  roundShotsHistory: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  sign: TypedContractMethod<
    [data: BytesLike, key: BytesLike],
    [string],
    "view"
  >;

  submitKey: TypedContractMethod<[key: BytesLike], [void], "nonpayable">;

  takeAShot: TypedContractMethod<
    [_coord: BattleShipGame.CoordinateStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NO_PLAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NO_SHIP_PIECES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "destroyedPlayers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "endTurn"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getWinner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasReportedShots"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCheater"
  ): TypedContractMethod<[_player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isGameOver"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isGameStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isKeysRevealed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTurnOver"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<
    [_playerShips: BytesLike[], hashedSecretKey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "numberOfDestroyedPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfKeysSubmitted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerHasPlacedShips"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "playerHasPlayed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "playerHasReportedHits"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "playerHashedSecretKeys"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "playerReportHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [[string, string] & { signature: string; shotBy: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "playerSecretKeys"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "playerShots"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "reportHits"
  ): TypedContractMethod<
    [_shotSignatures: BattleShipGame.ShipShotProofStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "round"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "roundShotsHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "sign"
  ): TypedContractMethod<[data: BytesLike, key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "submitKey"
  ): TypedContractMethod<[key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "takeAShot"
  ): TypedContractMethod<
    [_coord: BattleShipGame.CoordinateStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PlayerJoinedGame"
  ): TypedContractEvent<
    PlayerJoinedGameEvent.InputTuple,
    PlayerJoinedGameEvent.OutputTuple,
    PlayerJoinedGameEvent.OutputObject
  >;
  getEvent(
    key: "PlayerLost"
  ): TypedContractEvent<
    PlayerLostEvent.InputTuple,
    PlayerLostEvent.OutputTuple,
    PlayerLostEvent.OutputObject
  >;
  getEvent(
    key: "ShotReport"
  ): TypedContractEvent<
    ShotReportEvent.InputTuple,
    ShotReportEvent.OutputTuple,
    ShotReportEvent.OutputObject
  >;

  filters: {
    "PlayerJoinedGame(address,uint256)": TypedContractEvent<
      PlayerJoinedGameEvent.InputTuple,
      PlayerJoinedGameEvent.OutputTuple,
      PlayerJoinedGameEvent.OutputObject
    >;
    PlayerJoinedGame: TypedContractEvent<
      PlayerJoinedGameEvent.InputTuple,
      PlayerJoinedGameEvent.OutputTuple,
      PlayerJoinedGameEvent.OutputObject
    >;

    "PlayerLost(address)": TypedContractEvent<
      PlayerLostEvent.InputTuple,
      PlayerLostEvent.OutputTuple,
      PlayerLostEvent.OutputObject
    >;
    PlayerLost: TypedContractEvent<
      PlayerLostEvent.InputTuple,
      PlayerLostEvent.OutputTuple,
      PlayerLostEvent.OutputObject
    >;

    "ShotReport(tuple,address,address,bool)": TypedContractEvent<
      ShotReportEvent.InputTuple,
      ShotReportEvent.OutputTuple,
      ShotReportEvent.OutputObject
    >;
    ShotReport: TypedContractEvent<
      ShotReportEvent.InputTuple,
      ShotReportEvent.OutputTuple,
      ShotReportEvent.OutputObject
    >;
  };
}
